error: const `impl` for trait `Add` which is not marked with `#[const_trait]`
  --> $DIR/unify-op-with-fn-call.rs:10:12
   |
LL | impl const std::ops::Add for Foo {
   |            ^^^^^^^^^^^^^
   |
   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`
   = note: adding a non-const method body in the future would be a breaking change

error[E0741]: `Foo` must implement `ConstParamTy` to be used as the type of a const generic parameter
  --> $DIR/unify-op-with-fn-call.rs:18:29
   |
LL | struct Evaluatable<const N: Foo>;
   |                             ^^^
   |
help: add `#[derive(ConstParamTy)]` to the struct
   |
LL + #[derive(ConstParamTy)]
LL | struct Foo(u8);
   |

error[E0741]: `Foo` must implement `ConstParamTy` to be used as the type of a const generic parameter
  --> $DIR/unify-op-with-fn-call.rs:20:17
   |
LL | fn foo<const N: Foo>(a: Evaluatable<{ N + N }>) {
   |                 ^^^
   |
help: add `#[derive(ConstParamTy)]` to the struct
   |
LL + #[derive(ConstParamTy)]
LL | struct Foo(u8);
   |

error[E0741]: `Foo` must implement `ConstParamTy` to be used as the type of a const generic parameter
  --> $DIR/unify-op-with-fn-call.rs:24:17
   |
LL | fn bar<const N: Foo>() {}
   |                 ^^^
   |
help: add `#[derive(ConstParamTy)]` to the struct
   |
LL + #[derive(ConstParamTy)]
LL | struct Foo(u8);
   |

error: unconstrained generic constant
  --> $DIR/unify-op-with-fn-call.rs:30:12
   |
LL |     bar2::<{ std::ops::Add::add(N, N) }>();
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: try adding a `where` bound
   |
LL | fn foo2<const N: usize>(a: Evaluatable2<{ N + N }>) where [(); { std::ops::Add::add(N, N) }]: {
   |                                                     +++++++++++++++++++++++++++++++++++++++++

error: aborting due to 5 previous errors

For more information about this error, try `rustc --explain E0741`.
