error: Undefined Behavior: deallocation through <TAG> (root of the allocation) at ALLOC[0x0] is forbidden
  --> RUSTLIB/alloc/src/alloc.rs:LL:CC
   |
LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ deallocation through <TAG> (root of the allocation) at ALLOC[0x0] is forbidden
   |
   = help: this indicates a potential bug in the program: it performed an invalid operation, but the Tree Borrows rules it violated are still experimental
   = help: the allocation of the accessed tag <TAG> (root of the allocation) also contains the strongly protected tag <TAG>
   = help: the strongly protected tag <TAG> disallows deallocations
help: the accessed tag <TAG> was created here
  --> $DIR/zero-sized-protected.rs:LL:CC
   |
LL |     let ptr = unsafe { alloc(l) };
   |                        ^^^^^^^^
help: the strongly protected tag <TAG> was created here, in the initial state Reserved
  --> $DIR/zero-sized-protected.rs:LL:CC
   |
LL | fn test(_x: &mut (), ptr: *mut u8, l: Layout) {
   |         ^^
   = note: BACKTRACE (of the first span):
   = note: inside `std::alloc::dealloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC
note: inside `test`
  --> $DIR/zero-sized-protected.rs:LL:CC
   |
LL |     unsafe { dealloc(ptr, l) };
   |              ^^^^^^^^^^^^^^^
note: inside `main`
  --> $DIR/zero-sized-protected.rs:LL:CC
   |
LL |     unsafe { test(&mut *ptr.cast::<()>(), ptr, l) };
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace

error: aborting due to 1 previous error

